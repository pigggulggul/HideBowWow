/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/object/Floor_navy.glb -t -o src/components/content/canvas/maps/structures/ground/elements/Floor_navy.tsx 
*/

import * as THREE from 'three';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { useBox } from '@react-three/cannon';
import { ObjectSettingType } from '../../../../../../../types/GameType';
import React from 'react';
type GLTFResult = GLTF & {
    nodes: {
        Floor_4: THREE.Mesh;
    };
    materials: {
        Cartoon_Room_Mat: THREE.MeshStandardMaterial;
    };
};

function Floor_navyComponent(props: ObjectSettingType) {
    const { nodes, materials } = useGLTF(
        '/models/object/Floor_navy.glb'
    ) as GLTFResult;
    const [ref] = useBox<THREE.Mesh>(() => ({
        args: [10, 10, 0.2],
        mass: 0.1,
        type: 'Static',
        position: props.position,
        rotation: props.rotation,
        linearFactor: [0, 0, 0], // 모든 축에 대해 이동 제한
        angularFactor: [0, 0, 0], // 모든 축에 대해 회전 제한
    }));
    return (
        <group dispose={null}>
            <mesh
                ref={ref}
                geometry={nodes.Floor_4.geometry}
                material={materials.Cartoon_Room_Mat}
                position={props.position}
                rotation={props.rotation}
                scale-y={0.0202}
                scale-x={0.0202}
                scale-z={0.01}
            />
        </group>
    );
}

useGLTF.preload('/models/object/Floor_navy.glb');

function areEqual(prevProps: ObjectSettingType, nextProps: ObjectSettingType) {
    return (
        prevProps.position[0] === nextProps.position[0] &&
        prevProps.position[1] === nextProps.position[1] &&
        prevProps.position[2] === nextProps.position[2]
    );
}

export const Floor_navy = React.memo(Floor_navyComponent, areEqual);