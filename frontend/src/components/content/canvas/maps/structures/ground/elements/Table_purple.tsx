/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/object/Table_purple.glb -t -o src/components/content/canvas/maps/structures/ground/elements/Table_purple.tsx 
*/

import * as THREE from 'three';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { ObjectSettingType } from '../../../../../../../types/GameType';
import React from 'react';
type GLTFResult = GLTF & {
    nodes: {
        Table_11: THREE.Mesh;
    };
    materials: {
        Cartoon_Room_Mat: THREE.MeshStandardMaterial;
    };
};

function Table_purpleComponent(props: ObjectSettingType) {
    const { nodes, materials } = useGLTF(
        '/models/object/Table_purple.glb'
    ) as GLTFResult;
    return (
        <group dispose={null}>
            <mesh
                geometry={nodes.Table_11.geometry}
                material={materials.Cartoon_Room_Mat}
                position={props.position}
                rotation={props.rotation}
                scale={0.01}
            />
        </group>
    );
}

useGLTF.preload('/models/object/Table_purple.glb');

function areEqual(prevProps: ObjectSettingType, nextProps: ObjectSettingType) {
    return (
        prevProps.position[0] === nextProps.position[0] &&
        prevProps.position[1] === nextProps.position[1] &&
        prevProps.position[2] === nextProps.position[2]
    );
}

export const Table_purple = React.memo(Table_purpleComponent, areEqual);