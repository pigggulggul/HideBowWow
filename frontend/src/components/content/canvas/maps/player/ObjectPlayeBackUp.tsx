/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/CubeGuyCharacter.glb -t -o src/components/content/canvas/maps/player/Man.tsx 
*/

import { useGLTF } from '@react-three/drei';
import { PlayerInitType } from '../../../../../types/GameType';
import { NicknameBoard } from '../structures/ground/3DUIs/NicknameBoard';
import { useObject } from './hooks/useObject';

// type GLTFResult = GLTF & {
//     nodes: {
//         Character: THREE.SkinnedMesh;
//         Root: THREE.Bone;
//     };
//     materials: {
//         Atlas: THREE.MeshStandardMaterial;
//     };
//     animations: GLTFAction[];
// };

// type ActionName = '';
// interface GLTFAction extends THREE.AnimationClip {
//     name: ActionName;
// }

// type ContextType = Record<
//     string,
//     React.ForwardRefExoticComponent<
//         JSX.IntrinsicElements['skinnedMesh'] | JSX.IntrinsicElements['bone']
//     >
// >;

export function ObjectPlayeBackUp({
    player,
    position,
    selectedIndex: mIdx,
}: PlayerInitType) {
    const modelIndex = mIdx ?? player.selectedIndex;
    const {
        meInfo,
        playerRef,
        memoizedPosition,
        playerNickname,
        scene,
        nicknameRef,
        scale,
    } = useObject({
        player,
        position,
        modelIndex,
    });

    return (
        <>
            {meInfo && (
                <NicknameBoard ref={nicknameRef} text={`${player?.nickname}`} />
            )}
            <primitive
                ref={playerRef}
                visible
                scale={scale}
                name={playerNickname}
                position={memoizedPosition}
                dispose={null}
                object={scene}
            ></primitive>
        </>
    );
}

useGLTF.preload('/models/CubeGuyCharacter.glb');
