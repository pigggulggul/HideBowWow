/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/object/Closet.glb -t -o src/components/content/canvas/maps/player/Closet.tsx 
*/

import { useRef } from 'react';
import { useGLTF } from '@react-three/drei';
import { PlayerInitType } from '../../../../../types/GameType';
import { useObject } from './hooks/useObject';
import { useFrame } from '@react-three/fiber';
import { useBox } from '@react-three/cannon';

export function ObjectPlayer({
    player,
    position,
    selectedIndex: mIdx,
}: PlayerInitType) {
    const modelIndex = mIdx ? mIdx : 0;
    const {
        playerRef,
        memoizedPosition,
        playerNickname,
        node,
        material,
        scale,
    } = useObject({
        player,
        position,
        modelIndex,
    });

    const [, boxApi] = useBox(
        () => ({
            mass: 0,
            args: [1, 1, 1],
            type: 'Kinematic',
            position: [
                memoizedPosition.x,
                memoizedPosition.y,
                memoizedPosition.z,
            ], // 초기 위치를 useRef의 현재 값으로 설정
            onCollide: (e) => {
                console.log('충돌', e);
            },
        }),
        useRef(null)
    );
    useFrame(() => {
        if (playerRef.current) {
            const { x, y, z } = playerRef.current.position;
            boxApi.position.set(x, y, z); // 물리 바디의 속도를 업데이트
        }
    });

    return (
        <group
            ref={playerRef}
            position={memoizedPosition}
            name={playerNickname ?? ''}
            dispose={null}
            scale={scale}
        >
            <mesh
                geometry={node}
                material={material}
                name={playerNickname}
                rotation={[Math.PI / 2, 0, 0]}
            />
        </group>
    );
}

useGLTF.preload('/models/object/Closet.glb');
